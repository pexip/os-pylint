commit 72e2e2a222e867e74b0ae15293a1a3c7bb5d16fe
Author: Huw Jones <huw@huwcbjones.co.uk>
Date:   Mon Jun 6 04:21:54 2022 +0100

    Fix a crash when linting ``__new__()`` methods that return a call (#6822)
    
    Only check for Enum attributes when metaclass is an Enum metaclass

--- a/pylint/checkers/typecheck.py
+++ b/pylint/checkers/typecheck.py
@@ -485,10 +485,10 @@
             except astroid.MroError:
                 return False
             if metaclass:
-                if _enum_has_attribute(owner, node):
-                    return False
                 # Renamed in Python 3.10 to `EnumType`
-                return metaclass.qname() in {"enum.EnumMeta", "enum.EnumType"}
+                if metaclass.qname() in {"enum.EnumMeta", "enum.EnumType"}:
+                    return not _enum_has_attribute(owner, node)
+                return False
             return False
         if not has_known_bases(owner):
             return False
@@ -617,7 +617,7 @@
             (c.value for c in dunder_new.get_children() if isinstance(c, nodes.Return)),
             None,
         )
-        if returned_obj_name is not None:
+        if isinstance(returned_obj_name, nodes.Name):
             # Find all attribute assignments to the returned object
             enum_attributes |= _get_all_attribute_assignments(
                 dunder_new, returned_obj_name.name
--- /dev/null
+++ b/tests/functional/e/enum_self_defined_member_6805.py
@@ -0,0 +1,43 @@
+"""Tests for self-defined Enum members (https://github.com/PyCQA/pylint/issues/6805)"""
+# pylint: disable=missing-docstring
+# pylint: disable=too-few-public-methods
+from enum import IntEnum
+
+
+class Foo(type):
+    pass
+
+
+class Parent:
+    def __new__(cls, *_args, **_kwargs):
+        return object.__new__(cls)
+
+
+class NotEnumHasDynamicGetAttrMetaclass(metaclass=Foo):
+    def __new__(cls):
+        return Parent.__new__(cls)
+
+    def __getattr__(self, item):
+        return item
+
+    def magic(self):
+        return self.dynamic
+
+
+NotEnumHasDynamicGetAttrMetaclass().magic()
+
+
+class Day(IntEnum):
+    MONDAY = (1, "Mon")
+    TUESDAY = (2, "Tue")
+    WEDNESDAY = (3, "Wed")
+    THURSDAY = (4, "Thu")
+    FRIDAY = (5, "Fri")
+    SATURDAY = (6, "Sat")
+    SUNDAY = (7, "Sun")
+
+    def __new__(cls, value, _abbr=None):
+        return int.__new__(cls, value)
+
+
+print(Day.FRIDAY.foo)  # [no-member]
--- /dev/null
+++ b/tests/functional/e/enum_self_defined_member_6805.txt
@@ -0,0 +1 @@
+no-member:43:6:43:20::Instance of 'FRIDAY' has no 'foo' member:INFERENCE
